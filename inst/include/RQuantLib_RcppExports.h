// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __RQuantLib_RcppExports_h__
#define __RQuantLib_RcppExports_h__

#include <Rcpp.h>

namespace RQuantLib {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RQuantLib", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RQuantLib", "RQuantLib_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RQuantLib");
            }
        }
    }

    inline QuantLib::Date tryDateTest(Rcpp::Date issueDateArg, int days) {
        typedef SEXP(*Ptr_tryDateTest)(SEXP,SEXP);
        static Ptr_tryDateTest p_tryDateTest = NULL;
        if (p_tryDateTest == NULL) {
            validateSignature("QuantLib::Date(*tryDateTest)(Rcpp::Date,int)");
            p_tryDateTest = (Ptr_tryDateTest)R_GetCCallable("RQuantLib", "RQuantLib_tryDateTest");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_tryDateTest(Rcpp::wrap(issueDateArg), Rcpp::wrap(days));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<QuantLib::Date >(__result);
    }

    inline QuantLib::Date tryDate(QuantLib::Date issueDate, int days) {
        typedef SEXP(*Ptr_tryDate)(SEXP,SEXP);
        static Ptr_tryDate p_tryDate = NULL;
        if (p_tryDate == NULL) {
            validateSignature("QuantLib::Date(*tryDate)(QuantLib::Date,int)");
            p_tryDate = (Ptr_tryDate)R_GetCCallable("RQuantLib", "RQuantLib_tryDate");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_tryDate(Rcpp::wrap(issueDate), Rcpp::wrap(days));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<QuantLib::Date >(__result);
    }

}

#endif // __RQuantLib_RcppExports_h__
